diff -Nur postgresql-8.3/build-tree/postgresql-8.3beta1/src/backend/commands/dbcommands.c postgresql-8.3.new/build-tree/postgresql-8.3beta1/src/backend/commands/dbcommands.c
--- postgresql-8.3beta1/src/backend/commands/dbcommands.c	2007-09-29 00:25:49.000000000 +0200
+++ postgresql-8.3beta1/src/backend/commands/dbcommands.c	2007-10-16 15:31:01.000000000 +0200
@@ -178,12 +178,12 @@
 		else if (IsA(dencoding->arg, String))
 		{
 			encoding_name = strVal(dencoding->arg);
-			if (pg_valid_server_encoding(encoding_name) < 0)
+			encoding = pg_valid_server_encoding(encoding_name);
+			if (encoding < 0)
 				ereport(ERROR,
 						(errcode(ERRCODE_UNDEFINED_OBJECT),
 						 errmsg("%s is not a valid encoding name",
 								encoding_name)));
-			encoding = pg_char_to_encoding(encoding_name);
 		}
 		else
 			elog(ERROR, "unrecognized node type: %d",
diff -Nur postgresql-8.3/build-tree/postgresql-8.3beta1/src/backend/utils/adt/ascii.c postgresql-8.3.new/build-tree/postgresql-8.3beta1/src/backend/utils/adt/ascii.c
--- postgresql-8.3beta1/src/backend/utils/adt/ascii.c	2007-01-05 23:19:40.000000000 +0100
+++ postgresql-8.3beta1/src/backend/utils/adt/ascii.c	2007-10-16 15:31:01.000000000 +0200
@@ -5,7 +5,7 @@
  *	 Portions Copyright (c) 1999-2007, PostgreSQL Global Development Group
  *
  * IDENTIFICATION
- *	  $PostgreSQL: pgsql/src/backend/utils/adt/ascii.c,v 1.30 2007/01/05 22:19:40 momjian Exp $
+ *	  $PostgreSQL: pgsql/src/backend/utils/adt/ascii.c,v 1.31 2007/10/13 20:18:41 tgl Exp $
  *
  *-----------------------------------------------------------------------
  */
@@ -117,7 +117,13 @@
 to_ascii_encname(PG_FUNCTION_ARGS)
 {
 	text	   *data = PG_GETARG_TEXT_P_COPY(0);
-	int			enc = pg_char_to_encoding(NameStr(*PG_GETARG_NAME(1)));
+	char	   *encname = NameStr(*PG_GETARG_NAME(1));
+	int			enc = pg_char_to_encoding(encname);
+
+	if (enc < 0)
+		ereport(ERROR,
+				(errcode(ERRCODE_UNDEFINED_OBJECT),
+				 errmsg("%s is not a valid encoding name", encname)));
 
 	PG_RETURN_TEXT_P(encode_to_ascii(data, enc));
 }
@@ -132,6 +138,11 @@
 	text	   *data = PG_GETARG_TEXT_P_COPY(0);
 	int			enc = PG_GETARG_INT32(1);
 
+	if (!PG_VALID_ENCODING(enc))
+		ereport(ERROR,
+				(errcode(ERRCODE_UNDEFINED_OBJECT),
+				 errmsg("%d is not a valid encoding code", enc)));
+
 	PG_RETURN_TEXT_P(encode_to_ascii(data, enc));
 }
 
diff -Nur postgresql-8.3/build-tree/postgresql-8.3beta1/src/backend/utils/adt/xml.c postgresql-8.3.new/build-tree/postgresql-8.3beta1/src/backend/utils/adt/xml.c
--- postgresql-8.3beta1/src/backend/utils/adt/xml.c	2007-09-23 23:36:42.000000000 +0200
+++ postgresql-8.3beta1/src/backend/utils/adt/xml.c	2007-10-16 15:31:01.000000000 +0200
@@ -7,7 +7,7 @@
  * Portions Copyright (c) 1996-2007, PostgreSQL Global Development Group
  * Portions Copyright (c) 1994, Regents of the University of California
  *
- * $PostgreSQL: pgsql/src/backend/utils/adt/xml.c,v 1.47 2007/09/23 21:36:42 tgl Exp $
+ * $PostgreSQL: pgsql/src/backend/utils/adt/xml.c,v 1.48 2007/10/13 20:18:41 tgl Exp $
  *
  *-------------------------------------------------------------------------
  */
@@ -127,6 +127,24 @@
 #define NAMESPACE_SQLXML "http://standards.iso.org/iso/9075/2003/sqlxml"
 
 
+#ifdef USE_LIBXML
+
+static int
+xmlChar_to_encoding(xmlChar *encoding_name)
+{
+	int		encoding = pg_char_to_encoding((char *) encoding_name);
+
+	if (encoding < 0)
+		ereport(ERROR,
+				(errcode(ERRCODE_INVALID_PARAMETER_VALUE),
+				 errmsg("invalid encoding name \"%s\"",
+						(char *) encoding_name)));
+	return encoding;
+}
+
+#endif
+
+
 Datum
 xml_in(PG_FUNCTION_ARGS)
 {
@@ -263,7 +281,9 @@
 	/* Now that we know what we're dealing with, convert to server encoding */
 	newstr = (char *) pg_do_encoding_conversion((unsigned char *) str,
 												nbytes,
-												encoding ? pg_char_to_encoding((char *) encoding) : PG_UTF8,
+												encoding ?
+												xmlChar_to_encoding(encoding) :
+												PG_UTF8,
 												GetDatabaseEncoding());
 
 	if (newstr != str)
@@ -1084,9 +1104,9 @@
 
 	utf8string = pg_do_encoding_conversion(string,
 										   len,
-										   encoding
-										   ? pg_char_to_encoding((char *) encoding)
-										   : GetDatabaseEncoding(),
+										   encoding ?
+										   xmlChar_to_encoding(encoding) :
+										   GetDatabaseEncoding(),
 										   PG_UTF8);
 
 	xml_init();
diff -Nur postgresql-8.3/build-tree/postgresql-8.3beta1/src/backend/utils/mb/encnames.c postgresql-8.3.new/build-tree/postgresql-8.3beta1/src/backend/utils/mb/encnames.c
--- postgresql-8.3beta1/src/backend/utils/mb/encnames.c	2007-04-16 20:50:49.000000000 +0200
+++ postgresql-8.3beta1/src/backend/utils/mb/encnames.c	2007-10-16 15:31:21.000000000 +0200
@@ -2,7 +2,7 @@
  * Encoding names and routines for work with it. All
  * in this file is shared bedween FE and BE.
  *
- * $PostgreSQL: pgsql/src/backend/utils/mb/encnames.c,v 1.34 2007/04/16 18:50:49 tgl Exp $
+ * $PostgreSQL: pgsql/src/backend/utils/mb/encnames.c,v 1.36 2007/10/15 22:46:27 tgl Exp $
  */
 #ifdef FRONTEND
 #include "postgres_fe.h"
@@ -12,10 +12,11 @@
 #include "utils/builtins.h"
 #endif
 
+#include <ctype.h>
 #include <unistd.h>
 
 #include "mb/pg_wchar.h"
-#include <ctype.h>
+
 
 /* ----------
  * All encoding names, sorted:		 *** A L P H A B E T I C ***
@@ -293,7 +294,7 @@
 
 /* ----------
  * These are "official" encoding names.
- * XXX must be sorted by the same order as pg_enc type (see mb/pg_wchar.h)
+ * XXX must be sorted by the same order as enum pg_enc (in mb/pg_wchar.h)
  * ----------
  */
 pg_enc2name pg_enc2name_tbl[] =
@@ -314,6 +315,9 @@
 		"EUC_TW", PG_EUC_TW
 	},
 	{
+		"EUC_JIS_2004", PG_EUC_JIS_2004
+	},
+	{
 		"UTF8", PG_UTF8
 	},
 	{
@@ -398,9 +402,6 @@
 		"WIN1257", PG_WIN1257
 	},
 	{
-		"EUC_JIS_2004", PG_EUC_JIS_2004
-	},
-	{
 		"SJIS", PG_SJIS
 	},
 	{
@@ -413,10 +414,10 @@
 		"UHC", PG_UHC
 	},
 	{
-		"JOHAB", PG_JOHAB
+		"GB18030", PG_GB18030
 	},
 	{
-		"GB18030", PG_GB18030
+		"JOHAB", PG_JOHAB
 	},
 	{
 		"SHIFT_JIS_2004", PG_SHIFT_JIS_2004
@@ -455,6 +456,12 @@
 	return enc;
 }
 
+int
+pg_valid_server_encoding_id(int encoding)
+{
+	return PG_VALID_BE_ENCODING(encoding);
+}
+
 /* ----------
  * Remove irrelevant chars from encoding name
  * ----------
@@ -533,14 +540,14 @@
  * Returns encoding or -1 for error
  */
 int
-pg_char_to_encoding(const char *s)
+pg_char_to_encoding(const char *name)
 {
-	pg_encname *p = NULL;
+	pg_encname *p;
 
-	if (!s)
+	if (!name)
 		return -1;
 
-	p = pg_char_to_encname_struct(s);
+	p = pg_char_to_encname_struct(name);
 	return p ? p->encoding : -1;
 }
 
diff -Nur postgresql-8.3/build-tree/postgresql-8.3beta1/src/backend/utils/mb/mbutils.c postgresql-8.3.new/build-tree/postgresql-8.3beta1/src/backend/utils/mb/mbutils.c
--- postgresql-8.3beta1/src/backend/utils/mb/mbutils.c	2007-09-24 18:38:24.000000000 +0200
+++ postgresql-8.3beta1/src/backend/utils/mb/mbutils.c	2007-10-16 15:31:01.000000000 +0200
@@ -4,7 +4,7 @@
  * (currently mule internal code (mic) is used)
  * Tatsuo Ishii
  *
- * $PostgreSQL: pgsql/src/backend/utils/mb/mbutils.c,v 1.66 2007/09/24 16:38:24 adunstan Exp $
+ * $PostgreSQL: pgsql/src/backend/utils/mb/mbutils.c,v 1.67 2007/10/13 20:18:41 tgl Exp $
  */
 #include "postgres.h"
 
@@ -421,6 +421,12 @@
 	int         len = VARSIZE(string) - VARHDRSZ;
 	int         retval;
 
+	if (src_encoding < 0)
+		ereport(ERROR,
+				(errcode(ERRCODE_INVALID_PARAMETER_VALUE),
+				 errmsg("invalid encoding name \"%s\"",
+						src_encoding_name)));
+
 	retval = pg_verify_mbstr_len(src_encoding, VARDATA(string), len, false);
 	PG_RETURN_INT32(retval);
 	
diff -Nur postgresql-8.3/build-tree/postgresql-8.3beta1/src/backend/utils/mb/wchar.c postgresql-8.3.new/build-tree/postgresql-8.3beta1/src/backend/utils/mb/wchar.c
--- postgresql-8.3beta1/src/backend/utils/mb/wchar.c	2007-09-18 19:41:17.000000000 +0200
+++ postgresql-8.3beta1/src/backend/utils/mb/wchar.c	2007-10-16 15:31:21.000000000 +0200
@@ -1,7 +1,7 @@
 /*
  * conversion functions between pg_wchar and multibyte streams.
  * Tatsuo Ishii
- * $PostgreSQL: pgsql/src/backend/utils/mb/wchar.c,v 1.64 2007/09/18 17:41:17 adunstan Exp $
+ * $PostgreSQL: pgsql/src/backend/utils/mb/wchar.c,v 1.65 2007/10/15 22:46:27 tgl Exp $
  *
  */
 /* can be used in either frontend or backend */
@@ -38,8 +38,7 @@
  * SQL/ASCII
  */
 static int
-			pg_ascii2wchar_with_len
-			(const unsigned char *from, pg_wchar *to, int len)
+pg_ascii2wchar_with_len(const unsigned char *from, pg_wchar *to, int len)
 {
 	int			cnt = 0;
 
@@ -73,8 +72,8 @@
 /*
  * EUC
  */
-static int	pg_euc2wchar_with_len
-			(const unsigned char *from, pg_wchar *to, int len)
+static int
+pg_euc2wchar_with_len(const unsigned char *from, pg_wchar *to, int len)
 {
 	int			cnt = 0;
 
@@ -148,8 +147,8 @@
 /*
  * EUC_JP
  */
-static int	pg_eucjp2wchar_with_len
-			(const unsigned char *from, pg_wchar *to, int len)
+static int
+pg_eucjp2wchar_with_len(const unsigned char *from, pg_wchar *to, int len)
 {
 	return pg_euc2wchar_with_len(from, to, len);
 }
@@ -179,8 +178,8 @@
 /*
  * EUC_KR
  */
-static int	pg_euckr2wchar_with_len
-			(const unsigned char *from, pg_wchar *to, int len)
+static int
+pg_euckr2wchar_with_len(const unsigned char *from, pg_wchar *to, int len)
 {
 	return pg_euc2wchar_with_len(from, to, len);
 }
@@ -201,8 +200,8 @@
  * EUC_CN
  *
  */
-static int	pg_euccn2wchar_with_len
-			(const unsigned char *from, pg_wchar *to, int len)
+static int
+pg_euccn2wchar_with_len(const unsigned char *from, pg_wchar *to, int len)
 {
 	int			cnt = 0;
 
@@ -268,8 +267,8 @@
  * EUC_TW
  *
  */
-static int	pg_euctw2wchar_with_len
-			(const unsigned char *from, pg_wchar *to, int len)
+static int
+pg_euctw2wchar_with_len(const unsigned char *from, pg_wchar *to, int len)
 {
 	int			cnt = 0;
 
@@ -344,12 +343,6 @@
  * JOHAB
  */
 static int
-pg_johab2wchar_with_len(const unsigned char *from, pg_wchar *to, int len)
-{
-	return pg_euc2wchar_with_len(from, to, len);
-}
-
-static int
 pg_johab_mblen(const unsigned char *s)
 {
 	return pg_euc_mblen(s);
@@ -1307,6 +1300,7 @@
 /*
  *-------------------------------------------------------------------
  * encoding info table
+ * XXX must be sorted by the same order as enum pg_enc (in mb/pg_wchar.h)
  *-------------------------------------------------------------------
  */
 pg_wchar_tbl pg_wchar_table[] = {
@@ -1315,41 +1309,41 @@
 	{pg_euccn2wchar_with_len, pg_euccn_mblen, pg_euccn_dsplen, pg_euccn_verifier, 2},	/* 2; PG_EUC_CN */
 	{pg_euckr2wchar_with_len, pg_euckr_mblen, pg_euckr_dsplen, pg_euckr_verifier, 3},	/* 3; PG_EUC_KR */
 	{pg_euctw2wchar_with_len, pg_euctw_mblen, pg_euctw_dsplen, pg_euctw_verifier, 4},	/* 4; PG_EUC_TW */
-	{pg_utf2wchar_with_len, pg_utf_mblen, pg_utf_dsplen, pg_utf8_verifier, 4},	/* 5; PG_UTF8 */
-	{pg_mule2wchar_with_len, pg_mule_mblen, pg_mule_dsplen, pg_mule_verifier, 4},		/* 6; PG_MULE_INTERNAL */
-	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 7; PG_LATIN1 */
-	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 8; PG_LATIN2 */
-	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 9; PG_LATIN3 */
-	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 10; PG_LATIN4 */
-	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 11; PG_LATIN5 */
-	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 12; PG_LATIN6 */
-	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 13; PG_LATIN7 */
-	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 14; PG_LATIN8 */
-	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 15; PG_LATIN9 */
-	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 16; PG_LATIN10 */
-	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 17; PG_WIN1256 */
-	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 18; PG_WIN1258 */
-	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 19; PG_WIN874 */
-	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 21; PG_KOI8 */
-	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 22; PG_WIN1251 */
-	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 23; PG_WIN1252 */
-	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 24; PG_WIN866 */
+	{pg_eucjp2wchar_with_len, pg_eucjp_mblen, pg_eucjp_dsplen, pg_eucjp_verifier, 3},	/* 5; PG_EUC_JIS_2004 */
+	{pg_utf2wchar_with_len, pg_utf_mblen, pg_utf_dsplen, pg_utf8_verifier, 4},			/* 6; PG_UTF8 */
+	{pg_mule2wchar_with_len, pg_mule_mblen, pg_mule_dsplen, pg_mule_verifier, 4},		/* 7; PG_MULE_INTERNAL */
+	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 8; PG_LATIN1 */
+	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 9; PG_LATIN2 */
+	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 10; PG_LATIN3 */
+	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 11; PG_LATIN4 */
+	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 12; PG_LATIN5 */
+	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 13; PG_LATIN6 */
+	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 14; PG_LATIN7 */
+	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 15; PG_LATIN8 */
+	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 16; PG_LATIN9 */
+	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 17; PG_LATIN10 */
+	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 18; PG_WIN1256 */
+	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 19; PG_WIN1258 */
+	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 20; PG_WIN866 */
+	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 21; PG_WIN874 */
+	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 22; PG_KOI8R */
+	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 23; PG_WIN1251 */
+	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 24; PG_WIN1252 */
 	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 25; ISO-8859-5 */
-	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 25; ISO-8859-6 */
-	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 26; ISO-8859-7 */
-	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 27; ISO-8859-8 */
-	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 28; PG_WIN1250 */
-	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 29; PG_WIN1253 */
-	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 30; PG_WIN1254 */
-	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 31; PG_WIN1255 */
-	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 32; PG_WIN1257 */
-	{pg_eucjp2wchar_with_len, pg_eucjp_mblen, pg_eucjp_dsplen, pg_eucjp_verifier, 3},	/* 33; PG_EUC_JIS_2004 */
+	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 26; ISO-8859-6 */
+	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 27; ISO-8859-7 */
+	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 28; ISO-8859-8 */
+	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 29; PG_WIN1250 */
+	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 30; PG_WIN1253 */
+	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 31; PG_WIN1254 */
+	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 32; PG_WIN1255 */
+	{pg_latin12wchar_with_len, pg_latin1_mblen, pg_latin1_dsplen, pg_latin1_verifier, 1},		/* 33; PG_WIN1257 */
 	{0, pg_sjis_mblen, pg_sjis_dsplen, pg_sjis_verifier, 2},	/* 34; PG_SJIS */
 	{0, pg_big5_mblen, pg_big5_dsplen, pg_big5_verifier, 2},	/* 35; PG_BIG5 */
 	{0, pg_gbk_mblen, pg_gbk_dsplen, pg_gbk_verifier, 2},		/* 36; PG_GBK */
 	{0, pg_uhc_mblen, pg_uhc_dsplen, pg_uhc_verifier, 2},		/* 37; PG_UHC */
-	{pg_johab2wchar_with_len, pg_johab_mblen, pg_johab_dsplen, pg_johab_verifier, 3},	/* 38; PG_JOHAB */
-	{0, pg_gb18030_mblen, pg_gb18030_dsplen, pg_gb18030_verifier, 4},	/* 39; PG_GB18030 */
+	{0, pg_gb18030_mblen, pg_gb18030_dsplen, pg_gb18030_verifier, 4},	/* 38; PG_GB18030 */
+	{0, pg_johab_mblen, pg_johab_dsplen, pg_johab_verifier, 3},	/* 39; PG_JOHAB */
 	{0, pg_sjis_mblen, pg_sjis_dsplen, pg_sjis_verifier, 2}		/* 40; PG_SHIFT_JIS_2004 */
 };
 
@@ -1440,7 +1434,6 @@
 /*
  * Verify mbstr to make sure that it is validly encoded in the specified
  * encoding.
- *
  */
 bool
 pg_verify_mbstr(int encoding, const char *mbstr, int len, bool noError)
diff -Nur postgresql-8.3/build-tree/postgresql-8.3beta1/src/bin/initdb/initdb.c postgresql-8.3.new/build-tree/postgresql-8.3beta1/src/bin/initdb/initdb.c
--- postgresql-8.3beta1/src/bin/initdb/initdb.c	2007-09-29 02:14:40.000000000 +0200
+++ postgresql-8.3beta1/src/bin/initdb/initdb.c	2007-10-16 15:31:01.000000000 +0200
@@ -42,7 +42,7 @@
  * Portions Copyright (c) 1994, Regents of the University of California
  * Portions taken from FreeBSD.
  *
- * $PostgreSQL: pgsql/src/bin/initdb/initdb.c,v 1.144 2007/09/29 00:14:40 tgl Exp $
+ * $PostgreSQL: pgsql/src/bin/initdb/initdb.c,v 1.145 2007/10/13 20:18:41 tgl Exp $
  *
  *-------------------------------------------------------------------------
  */
@@ -2808,7 +2808,7 @@
 					progname);
 			exit(1);
 		}
-		else if (!PG_VALID_BE_ENCODING(ctype_enc))
+		else if (!pg_valid_server_encoding_id(ctype_enc))
 		{
 			/* We recognized it, but it's not a legal server encoding */
 			fprintf(stderr,
@@ -2968,7 +2968,7 @@
 	{
 		char	*linkloc;
 
-		linkloc = (char *) palloc(strlen(pg_data) + 8 + 2);
+		linkloc = (char *) pg_malloc(strlen(pg_data) + 8 + 2);
 		sprintf(linkloc, "%s/pg_xlog", pg_data);
 
 		/* check if the specified xlog directory is empty */
diff -Nur postgresql-8.3/build-tree/postgresql-8.3beta1/src/bin/initdb/Makefile postgresql-8.3.new/build-tree/postgresql-8.3beta1/src/bin/initdb/Makefile
--- postgresql-8.3beta1/src/bin/initdb/Makefile	2007-09-27 21:53:43.000000000 +0200
+++ postgresql-8.3beta1/src/bin/initdb/Makefile	2007-10-16 15:31:01.000000000 +0200
@@ -5,7 +5,7 @@
 # Portions Copyright (c) 1996-2007, PostgreSQL Global Development Group
 # Portions Copyright (c) 1994, Regents of the University of California
 #
-# $PostgreSQL: pgsql/src/bin/initdb/Makefile,v 1.53 2007/09/27 19:53:43 tgl Exp $
+# $PostgreSQL: pgsql/src/bin/initdb/Makefile,v 1.54 2007/10/13 20:18:41 tgl Exp $
 #
 #-------------------------------------------------------------------------
 
@@ -14,14 +14,24 @@
 top_builddir = ../../..
 include $(top_builddir)/src/Makefile.global
 
-override CPPFLAGS := -I$(libpq_srcdir) $(CPPFLAGS)
+override CPPFLAGS := -DFRONTEND -I$(libpq_srcdir) $(CPPFLAGS)
 
-OBJS=	initdb.o $(WIN32RES)
+OBJS=	initdb.o encnames.o pqsignal.o $(WIN32RES)
 
-all: submake-libpq submake-libpgport initdb
+all: submake-libpgport initdb
 
-initdb: $(OBJS) $(libpq_builddir)/libpq.a
-	$(CC) $(CFLAGS) $(OBJS) $(libpq_pgport) $(LDFLAGS) $(LIBS) -o $@$(X)
+initdb: $(OBJS)
+	$(CC) $(CFLAGS) $(OBJS) $(LDFLAGS) $(LIBS) -o $@$(X)
+
+# We used to pull in all of libpq to get encnames and pqsignal, but that
+# exposes us to risks of version skew if we link to a shared library.
+# Do it the hard way, instead, so that we're statically linked.
+
+encnames.c: % : $(top_srcdir)/src/backend/utils/mb/%
+	rm -f $@ && $(LN_S) $< .
+
+pqsignal.c: % : $(libpq_srcdir)/%
+	rm -f $@ && $(LN_S) $< .
 
 install: all installdirs
 	$(INSTALL_PROGRAM) initdb$(X) '$(DESTDIR)$(bindir)/initdb$(X)'
@@ -33,7 +43,7 @@
 	rm -f '$(DESTDIR)$(bindir)/initdb$(X)'
 
 clean distclean maintainer-clean:
-	rm -f initdb$(X) $(OBJS)
+	rm -f initdb$(X) $(OBJS) encnames.c pqsignal.c
 
 
 # ensure that changes in datadir propagate into object file
diff -Nur postgresql-8.3/build-tree/postgresql-8.3beta1/src/bin/pg_dump/pg_backup_archiver.c postgresql-8.3.new/build-tree/postgresql-8.3beta1/src/bin/pg_dump/pg_backup_archiver.c
--- postgresql-8.3beta1/src/bin/pg_dump/pg_backup_archiver.c	2007-08-21 03:11:20.000000000 +0200
+++ postgresql-8.3beta1/src/bin/pg_dump/pg_backup_archiver.c	2007-10-16 15:31:01.000000000 +0200
@@ -15,7 +15,7 @@
  *
  *
  * IDENTIFICATION
- *		$PostgreSQL: pgsql/src/bin/pg_dump/pg_backup_archiver.c,v 1.146 2007/08/21 01:11:20 tgl Exp $
+ *		$PostgreSQL: pgsql/src/bin/pg_dump/pg_backup_archiver.c,v 1.147 2007/10/13 20:18:41 tgl Exp $
  *
  *-------------------------------------------------------------------------
  */
@@ -32,7 +32,6 @@
 #endif
 
 #include "libpq/libpq-fs.h"
-#include "mb/pg_wchar.h"
 
 
 const char *progname;
@@ -1639,7 +1638,7 @@
 	AH->vrev = K_VERS_REV;
 
 	/* initialize for backwards compatible string processing */
-	AH->public.encoding = PG_SQL_ASCII;
+	AH->public.encoding = 0;	/* PG_SQL_ASCII */
 	AH->public.std_strings = false;
 
 	/* sql error handling */
diff -Nur postgresql-8.3/build-tree/postgresql-8.3beta1/src/bin/pg_dump/pg_dumpall.c postgresql-8.3.new/build-tree/postgresql-8.3beta1/src/bin/pg_dump/pg_dumpall.c
--- postgresql-8.3beta1/src/bin/pg_dump/pg_dumpall.c	2007-07-08 21:07:38.000000000 +0200
+++ postgresql-8.3beta1/src/bin/pg_dump/pg_dumpall.c	2007-10-16 15:31:01.000000000 +0200
@@ -6,7 +6,7 @@
  * Portions Copyright (c) 1994, Regents of the University of California
  *
  *
- * $PostgreSQL: pgsql/src/bin/pg_dump/pg_dumpall.c,v 1.92 2007/07/08 19:07:38 tgl Exp $
+ * $PostgreSQL: pgsql/src/bin/pg_dump/pg_dumpall.c,v 1.93 2007/10/13 20:18:41 tgl Exp $
  *
  *-------------------------------------------------------------------------
  */
@@ -27,7 +27,6 @@
 #endif
 
 #include "dumputils.h"
-#include "mb/pg_wchar.h"
 
 
 /* version string we expect back from pg_dump */
diff -Nur postgresql-8.3/build-tree/postgresql-8.3beta1/src/bin/pg_dump/pg_dump.c postgresql-8.3.new/build-tree/postgresql-8.3beta1/src/bin/pg_dump/pg_dump.c
--- postgresql-8.3beta1/src/bin/pg_dump/pg_dump.c	2007-09-03 02:39:19.000000000 +0200
+++ postgresql-8.3beta1/src/bin/pg_dump/pg_dump.c	2007-10-16 15:31:01.000000000 +0200
@@ -12,7 +12,7 @@
  *	by PostgreSQL
  *
  * IDENTIFICATION
- *	  $PostgreSQL: pgsql/src/bin/pg_dump/pg_dump.c,v 1.472 2007/09/03 00:39:19 tgl Exp $
+ *	  $PostgreSQL: pgsql/src/bin/pg_dump/pg_dump.c,v 1.473 2007/10/13 20:18:41 tgl Exp $
  *
  *-------------------------------------------------------------------------
  */
@@ -47,7 +47,6 @@
 #include "catalog/pg_type.h"
 #include "commands/sequence.h"
 #include "libpq/libpq-fs.h"
-#include "mb/pg_wchar.h"
 
 #include "pg_backup_archiver.h"
 #include "dumputils.h"
diff -Nur postgresql-8.3/build-tree/postgresql-8.3beta1/src/bin/psql/command.c postgresql-8.3.new/build-tree/postgresql-8.3beta1/src/bin/psql/command.c
--- postgresql-8.3beta1/src/bin/psql/command.c	2007-08-21 03:11:22.000000000 +0200
+++ postgresql-8.3beta1/src/bin/psql/command.c	2007-10-16 15:31:01.000000000 +0200
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2000-2007, PostgreSQL Global Development Group
  *
- * $PostgreSQL: pgsql/src/bin/psql/command.c,v 1.181 2007/08/21 01:11:22 tgl Exp $
+ * $PostgreSQL: pgsql/src/bin/psql/command.c,v 1.182 2007/10/13 20:18:41 tgl Exp $
  */
 #include "postgres_fe.h"
 #include "command.h"
@@ -45,7 +45,6 @@
 #include "psqlscan.h"
 #include "settings.h"
 #include "variables.h"
-#include "mb/pg_wchar.h"
 
 
 /* functions for use in this file */
@@ -295,7 +294,7 @@
 		}
 
 		if (pset.dirname)
-			pfree(pset.dirname);
+			free(pset.dirname);
 		pset.dirname = pg_strdup(dir);
 		canonicalize_path(pset.dirname);
 
diff -Nur postgresql-8.3/build-tree/postgresql-8.3beta1/src/bin/psql/common.c postgresql-8.3.new/build-tree/postgresql-8.3beta1/src/bin/psql/common.c
--- postgresql-8.3beta1/src/bin/psql/common.c	2007-06-22 03:09:28.000000000 +0200
+++ postgresql-8.3beta1/src/bin/psql/common.c	2007-10-16 15:31:01.000000000 +0200
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2000-2007, PostgreSQL Global Development Group
  *
- * $PostgreSQL: pgsql/src/bin/psql/common.c,v 1.135 2007/06/22 01:09:28 neilc Exp $
+ * $PostgreSQL: pgsql/src/bin/psql/common.c,v 1.136 2007/10/13 20:18:41 tgl Exp $
  */
 #include "postgres_fe.h"
 #include "common.h"
@@ -22,7 +22,6 @@
 #include "settings.h"
 #include "command.h"
 #include "copy.h"
-#include "mb/pg_wchar.h"
 #include "mbprint.h"
 
 
diff -Nur postgresql-8.3/build-tree/postgresql-8.3beta1/src/bin/psql/mbprint.c postgresql-8.3.new/build-tree/postgresql-8.3beta1/src/bin/psql/mbprint.c
--- postgresql-8.3beta1/src/bin/psql/mbprint.c	2007-01-05 23:19:49.000000000 +0100
+++ postgresql-8.3beta1/src/bin/psql/mbprint.c	2007-10-16 15:31:01.000000000 +0200
@@ -3,15 +3,45 @@
  *
  * Copyright (c) 2000-2007, PostgreSQL Global Development Group
  *
- * $PostgreSQL: pgsql/src/bin/psql/mbprint.c,v 1.25 2007/01/05 22:19:49 momjian Exp $
+ * $PostgreSQL: pgsql/src/bin/psql/mbprint.c,v 1.26 2007/10/13 20:18:41 tgl Exp $
+ *
+ * XXX this file does not really belong in psql/.  Perhaps move to libpq?
+ * It also seems that the mbvalidate function is redundant with existing
+ * functionality.
  */
 
 #include "postgres_fe.h"
+#include "mbprint.h"
+#include "libpq-fe.h"
 #ifndef PGSCRIPTS
 #include "settings.h"
 #endif
-#include "mbprint.h"
-#include "mb/pg_wchar.h"
+
+/*
+ * To avoid version-skew problems, this file must not use declarations
+ * from pg_wchar.h: the encoding IDs we are dealing with are determined
+ * by the libpq.so we are linked with, and that might not match the
+ * numbers we see at compile time.  (If this file were inside libpq,
+ * the problem would go away...)
+ *
+ * Hence, we have our own definition of pg_wchar, and we get the values
+ * of any needed encoding IDs on-the-fly.
+ */
+
+typedef unsigned int pg_wchar;
+
+static int
+get_utf8_id(void)
+{
+	static int	utf8_id = -1;
+
+	if (utf8_id < 0)
+		utf8_id = pg_char_to_encoding("utf8");
+	return utf8_id;
+}
+
+#define PG_UTF8		get_utf8_id()
+
 
 static pg_wchar
 utf2ucs(const unsigned char *c)
diff -Nur postgresql-8.3/build-tree/postgresql-8.3beta1/src/bin/psql/psqlscan.l postgresql-8.3.new/build-tree/postgresql-8.3beta1/src/bin/psql/psqlscan.l
--- postgresql-8.3beta1/src/bin/psql/psqlscan.l	2007-01-05 23:19:49.000000000 +0100
+++ postgresql-8.3beta1/src/bin/psql/psqlscan.l	2007-10-16 15:31:01.000000000 +0200
@@ -33,7 +33,7 @@
  * Portions Copyright (c) 1994, Regents of the University of California
  *
  * IDENTIFICATION
- *	  $PostgreSQL: pgsql/src/bin/psql/psqlscan.l,v 1.21 2007/01/05 22:19:49 momjian Exp $
+ *	  $PostgreSQL: pgsql/src/bin/psql/psqlscan.l,v 1.22 2007/10/13 20:18:41 tgl Exp $
  *
  *-------------------------------------------------------------------------
  */
@@ -43,8 +43,6 @@
 
 #include <ctype.h>
 
-#include "mb/pg_wchar.h"
-
 #include "common.h"
 #include "settings.h"
 #include "variables.h"
@@ -1021,7 +1019,7 @@
 
 	/* Do we need to hack the character set encoding? */
 	state->encoding = pset.encoding;
-	state->safe_encoding = PG_VALID_BE_ENCODING(state->encoding);
+	state->safe_encoding = pg_valid_server_encoding_id(state->encoding);
 
 	/* needed for prepare_buffer */
 	cur_state = state;
diff -Nur postgresql-8.3/build-tree/postgresql-8.3beta1/src/bin/scripts/createdb.c postgresql-8.3.new/build-tree/postgresql-8.3beta1/src/bin/scripts/createdb.c
--- postgresql-8.3beta1/src/bin/scripts/createdb.c	2007-06-04 12:02:40.000000000 +0200
+++ postgresql-8.3beta1/src/bin/scripts/createdb.c	2007-10-16 15:31:01.000000000 +0200
@@ -5,17 +5,15 @@
  * Portions Copyright (c) 1996-2007, PostgreSQL Global Development Group
  * Portions Copyright (c) 1994, Regents of the University of California
  *
- * $PostgreSQL: pgsql/src/bin/scripts/createdb.c,v 1.23 2007/06/04 10:02:40 petere Exp $
+ * $PostgreSQL: pgsql/src/bin/scripts/createdb.c,v 1.24 2007/10/13 20:18:41 tgl Exp $
  *
  *-------------------------------------------------------------------------
  */
-
 #include "postgres_fe.h"
+
 #include "common.h"
 #include "dumputils.h"
 
-#include "mb/pg_wchar.h"
-
 
 static void help(const char *progname);
 
diff -Nur postgresql-8.3/build-tree/postgresql-8.3beta1/src/include/catalog/catversion.h postgresql-8.3.new/build-tree/postgresql-8.3beta1/src/include/catalog/catversion.h
--- postgresql-8.3beta1/src/include/catalog/catversion.h	2007-09-30 21:54:58.000000000 +0200
+++ postgresql-8.3beta1/src/include/catalog/catversion.h	2007-10-16 15:31:01.000000000 +0200
@@ -37,7 +37,7 @@
  * Portions Copyright (c) 1996-2007, PostgreSQL Global Development Group
  * Portions Copyright (c) 1994, Regents of the University of California
  *
- * $PostgreSQL: pgsql/src/include/catalog/catversion.h,v 1.430 2007/09/30 19:54:58 tgl Exp $
+ * $PostgreSQL: pgsql/src/include/catalog/catversion.h,v 1.431 2007/10/13 20:18:41 tgl Exp $
  *
  *-------------------------------------------------------------------------
  */
@@ -53,6 +53,6 @@
  */
 
 /*							yyyymmddN */
-#define CATALOG_VERSION_NO	200709301
+#define CATALOG_VERSION_NO	200710131
 
 #endif
diff -Nur postgresql-8.3/build-tree/postgresql-8.3beta1/src/include/mb/pg_wchar.h postgresql-8.3.new/build-tree/postgresql-8.3beta1/src/include/mb/pg_wchar.h
--- postgresql-8.3beta1/src/include/mb/pg_wchar.h	2007-09-18 19:41:17.000000000 +0200
+++ postgresql-8.3beta1/src/include/mb/pg_wchar.h	2007-10-16 15:31:21.000000000 +0200
@@ -1,19 +1,28 @@
-/* $PostgreSQL: pgsql/src/include/mb/pg_wchar.h,v 1.73 2007/09/18 17:41:17 adunstan Exp $ */
-
+/*-------------------------------------------------------------------------
+ *
+ * pg_wchar.h
+ *	  multibyte-character support
+ *
+ * Portions Copyright (c) 1996-2007, PostgreSQL Global Development Group
+ * Portions Copyright (c) 1994, Regents of the University of California
+ *
+ * $PostgreSQL: pgsql/src/include/mb/pg_wchar.h,v 1.75 2007/10/15 22:46:27 tgl Exp $
+ *
+ *	NOTES
+ *		This is used both by the backend and by libpq, but should not be
+ *		included by libpq client programs.  In particular, a libpq client
+ *		should not assume that the encoding IDs used by the version of libpq
+ *		it's linked to match up with the IDs declared here.
+ *
+ *-------------------------------------------------------------------------
+ */
 #ifndef PG_WCHAR_H
 #define PG_WCHAR_H
 
 #include <sys/types.h>
 
-#ifdef FRONTEND
-#undef palloc
-#define palloc malloc
-#undef pfree
-#define pfree free
-#endif
-
 /*
- * The pg_wchar
+ * The pg_wchar type
  */
 typedef unsigned int pg_wchar;
 
@@ -143,13 +152,19 @@
 /*
  * PostgreSQL encoding identifiers
  *
- * WARNING: the order of this table must be same as order
- *			in the pg_enc2name[] (mb/encnames.c) array!
+ * WARNING: the order of this enum must be same as order of entries
+ *			in the pg_enc2name_tbl[] array (in mb/encnames.c), and
+ *			in the pg_wchar_table[] array (in mb/wchar.c)!
  *
  *			If you add some encoding don't forget to check
  *			PG_ENCODING_BE_LAST macro.
  *
- * The PG_SQL_ASCII is default encoding and must be = 0.
+ * PG_SQL_ASCII is default encoding and must be = 0.
+ *
+ * XXX  We must avoid renumbering any backend encoding until libpq's major
+ * version number is increased beyond 5; it turns out that the backend
+ * encoding IDs are effectively part of libpq's ABI as far as 8.2 initdb and
+ * psql are concerned.
  */
 typedef enum pg_enc
 {
@@ -158,6 +173,7 @@
 	PG_EUC_CN,					/* EUC for Chinese */
 	PG_EUC_KR,					/* EUC for Korean */
 	PG_EUC_TW,					/* EUC for Taiwan */
+	PG_EUC_JIS_2004,			/* EUC-JIS-2004 */
 	PG_UTF8,					/* Unicode UTF8 */
 	PG_MULE_INTERNAL,			/* Mule internal code */
 	PG_LATIN1,					/* ISO-8859-1 Latin 1 */
@@ -186,7 +202,6 @@
 	PG_WIN1254,					/* windows-1254 */
 	PG_WIN1255,					/* windows-1255 */
 	PG_WIN1257,					/* windows-1257 */
-	PG_EUC_JIS_2004,			/* EUC-JIS-2004 */
 	/* PG_ENCODING_BE_LAST points to the above entry */
 
 	/* followings are for client encoding only */
@@ -194,14 +209,14 @@
 	PG_BIG5,					/* Big5 (Windows-950) */
 	PG_GBK,						/* GBK (Windows-936) */
 	PG_UHC,						/* UHC (Windows-949) */
-	PG_JOHAB,					/* EUC for Korean JOHAB */
 	PG_GB18030,					/* GB18030 */
+	PG_JOHAB,					/* EUC for Korean JOHAB */
 	PG_SHIFT_JIS_2004,			/* Shift-JIS-2004 */
 	_PG_LAST_ENCODING_			/* mark only */
 
 } pg_enc;
 
-#define PG_ENCODING_BE_LAST PG_EUC_JIS_2004
+#define PG_ENCODING_BE_LAST PG_WIN1257
 
 /*
  * Please use these tests before access to pg_encconv_tbl[]
@@ -245,11 +260,6 @@
 
 extern pg_enc2name pg_enc2name_tbl[];
 
-extern pg_encname *pg_char_to_encname_struct(const char *name);
-
-extern int	pg_char_to_encoding(const char *s);
-extern const char *pg_encoding_to_char(int encoding);
-
 /*
  * pg_wchar stuff
  */
@@ -315,6 +325,21 @@
 	uint32 utf2;			/* UTF-8 code 2 */
 } pg_local_to_utf_combined;
 
+
+/*
+ * These functions are considered part of libpq's exported API and
+ * are also declared in libpq-fe.h.
+ */
+extern int	pg_char_to_encoding(const char *name);
+extern const char *pg_encoding_to_char(int encoding);
+extern int	pg_valid_server_encoding_id(int encoding);
+
+/*
+ * Remaining functions are not considered part of libpq's API, though many
+ * of them do exist inside libpq.
+ */
+extern pg_encname *pg_char_to_encname_struct(const char *name);
+
 extern int	pg_mb2wchar(const char *from, pg_wchar *to);
 extern int	pg_mb2wchar_with_len(const char *from, pg_wchar *to, int len);
 extern int	pg_encoding_mb2wchar_with_len(int encoding,
diff -Nur postgresql-8.3/build-tree/postgresql-8.3beta1/src/interfaces/libpq/exports.txt postgresql-8.3.new/build-tree/postgresql-8.3beta1/src/interfaces/libpq/exports.txt
--- postgresql-8.3beta1/src/interfaces/libpq/exports.txt	2007-07-08 19:11:51.000000000 +0200
+++ postgresql-8.3beta1/src/interfaces/libpq/exports.txt	2007-10-16 15:31:01.000000000 +0200
@@ -1,4 +1,4 @@
-# $PostgreSQL: pgsql/src/interfaces/libpq/exports.txt,v 1.16 2007/07/08 17:11:51 joe Exp $
+# $PostgreSQL: pgsql/src/interfaces/libpq/exports.txt,v 1.17 2007/10/13 20:18:41 tgl Exp $
 # Functions to be exported by libpq DLLs
 PQconnectdb               1
 PQsetdbLogin              2
@@ -138,3 +138,4 @@
 PQsendDescribePortal      136
 lo_truncate               137
 PQconnectionUsedPassword  138
+pg_valid_server_encoding_id 139
diff -Nur postgresql-8.3/build-tree/postgresql-8.3beta1/src/interfaces/libpq/fe-exec.c postgresql-8.3.new/build-tree/postgresql-8.3beta1/src/interfaces/libpq/fe-exec.c
--- postgresql-8.3beta1/src/interfaces/libpq/fe-exec.c	2007-01-05 23:20:01.000000000 +0100
+++ postgresql-8.3beta1/src/interfaces/libpq/fe-exec.c	2007-10-16 15:31:01.000000000 +0200
@@ -8,7 +8,7 @@
  *
  *
  * IDENTIFICATION
- *	  $PostgreSQL: pgsql/src/interfaces/libpq/fe-exec.c,v 1.192 2007/01/05 22:20:01 momjian Exp $
+ *	  $PostgreSQL: pgsql/src/interfaces/libpq/fe-exec.c,v 1.193 2007/10/13 20:18:42 tgl Exp $
  *
  *-------------------------------------------------------------------------
  */
@@ -630,11 +630,14 @@
 	 * standard_conforming_strings, and convert server version to a numeric
 	 * form.  We keep the first two of these in static variables as well, so
 	 * that PQescapeString and PQescapeBytea can behave somewhat sanely (at
-	 * least in single- connection-using programs).
+	 * least in single-connection-using programs).
 	 */
 	if (strcmp(name, "client_encoding") == 0)
 	{
 		conn->client_encoding = pg_char_to_encoding(value);
+		/* if we don't recognize the encoding name, fall back to SQL_ASCII */
+		if (conn->client_encoding < 0)
+			conn->client_encoding = PG_SQL_ASCII;
 		static_client_encoding = conn->client_encoding;
 	}
 	else if (strcmp(name, "standard_conforming_strings") == 0)
diff -Nur postgresql-8.3/build-tree/postgresql-8.3beta1/src/interfaces/libpq/fe-misc.c postgresql-8.3.new/build-tree/postgresql-8.3beta1/src/interfaces/libpq/fe-misc.c
--- postgresql-8.3beta1/src/interfaces/libpq/fe-misc.c	2007-01-05 23:20:01.000000000 +0100
+++ postgresql-8.3beta1/src/interfaces/libpq/fe-misc.c	2007-10-16 15:31:01.000000000 +0200
@@ -23,7 +23,7 @@
  * Portions Copyright (c) 1994, Regents of the University of California
  *
  * IDENTIFICATION
- *	  $PostgreSQL: pgsql/src/interfaces/libpq/fe-misc.c,v 1.131 2007/01/05 22:20:01 momjian Exp $
+ *	  $PostgreSQL: pgsql/src/interfaces/libpq/fe-misc.c,v 1.132 2007/10/13 20:18:42 tgl Exp $
  *
  *-------------------------------------------------------------------------
  */
@@ -1112,7 +1112,11 @@
 
 	str = getenv("PGCLIENTENCODING");
 	if (str && *str != '\0')
+	{
 		encoding = pg_char_to_encoding(str);
+		if (encoding < 0)
+			encoding = PG_SQL_ASCII;
+	}
 	return encoding;
 }
 
diff -Nur postgresql-8.3/build-tree/postgresql-8.3beta1/src/interfaces/libpq/libpq-fe.h postgresql-8.3.new/build-tree/postgresql-8.3beta1/src/interfaces/libpq/libpq-fe.h
--- postgresql-8.3beta1/src/interfaces/libpq/libpq-fe.h	2007-07-08 20:28:55.000000000 +0200
+++ postgresql-8.3beta1/src/interfaces/libpq/libpq-fe.h	2007-10-16 15:31:01.000000000 +0200
@@ -7,7 +7,7 @@
  * Portions Copyright (c) 1996-2007, PostgreSQL Global Development Group
  * Portions Copyright (c) 1994, Regents of the University of California
  *
- * $PostgreSQL: pgsql/src/interfaces/libpq/libpq-fe.h,v 1.138 2007/07/08 18:28:55 tgl Exp $
+ * $PostgreSQL: pgsql/src/interfaces/libpq/libpq-fe.h,v 1.139 2007/10/13 20:18:42 tgl Exp $
  *
  *-------------------------------------------------------------------------
  */
@@ -511,6 +511,12 @@
 
 extern char *PQencryptPassword(const char *passwd, const char *user);
 
+/* === in encnames.c === */
+
+extern int	pg_char_to_encoding(const char *name);
+extern const char *pg_encoding_to_char(int encoding);
+extern int	pg_valid_server_encoding_id(int encoding);
+
 #ifdef __cplusplus
 }
 #endif
